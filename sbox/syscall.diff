--- qemu-2.10.0-rc3-clean/linux-user/syscall.c	2017-08-15 11:39:41.000000000 -0700
+++ qemu-2.10.0-rc3/linux-user/syscall.c	2017-08-22 14:34:03.193088186 -0700
@@ -116,6 +116,8 @@
 
 #include "qemu.h"
 
+extern unsigned int afl_forksrv_pid;
+
 #ifndef CLONE_IO
 #define CLONE_IO                0x80000000      /* Clone io context */
 #endif
@@ -11688,8 +11690,21 @@
         break;
 
     case TARGET_NR_tgkill:
-        ret = get_errno(safe_tgkill((int)arg1, (int)arg2,
-                        target_to_host_signal(arg3)));
+
+        {
+          int pid  = (int)arg1,
+              tgid = (int)arg2,
+              sig  = (int)arg3;
+
+          /* Not entirely sure if the below is correct for all architectures. */
+
+          if(afl_forksrv_pid && afl_forksrv_pid == pid && sig == SIGABRT)
+              pid = tgid = getpid();
+
+          ret = get_errno(safe_tgkill(pid, tgid, target_to_host_signal(sig)));
+
+        }
+
         break;
 
 #ifdef TARGET_NR_set_robust_list

--- qemu-2.10.0-rc3-clean/linux-user/syscall.c  2020-06-28 21:50:41.055137260 +0000
+++ qemu-2.10.0-rc3/linux-user/syscall.c        2020-06-29 00:26:31.948371705 +0000
@@ -115,6 +115,7 @@
 #include "uname.h"

 #include "qemu.h"
+#include <x86_64-linux-gnu/asm/unistd_64.h>

 extern unsigned int afl_forksrv_pid;

@@ -258,7 +259,7 @@
 #endif

 #ifdef __NR_gettid
-_syscall0(int, gettid)
+/* _syscall0(int, gettid) */
 #else
 /* This is a replacement for the host gettid() and must return a host
    errno. */


